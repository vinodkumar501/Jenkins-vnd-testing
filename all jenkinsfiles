
Pipeline syntax:

scripted pipeline and Declarative pipeline

Scripted:
----------

1.first syntax
2.groovy engine
3.advance scripting capability and high flexibility
4.difficult to start

syntax:
===================================
node {
  //groovy script
}
===================================


Declarative pipeline:
--------------------

1.easier to get started but not powerful
2.recent addition
3.predefined structure

This is the syntax you follow you have to fill in the /////////////
syntax:
===================================
pipeline {  
  agent any  
  stages {   
    stage(checkout) {      
     steps { 
          //////////////
        }
     }
  }
}


Here 
"pipeline" -> must be top level
"agent" -> where to execute
"stages" -> where to work happens
  
  eg:
  stages {   
    stage(build) {      
     steps { 
          //////////////
        }
     }
  }

------->
scripted 

node {
  //groovy script
}

--> scripted pipeline
node { 

-->equal to in declarative pipeline
pipeline {  
  agent any   
===================================
Jenkinsfile: 1 Declartive


pipeline {  
  agent any  
  stages {   
    stage(build) {      
     steps {       
       sh "echo builing apps"
        }
     }
  }
}
																								
======================================
pipeline 	must be top level
agent	Where to execute
stages	Where the work happens
  stage and steps
 
===========================
Multibranch Pipeline
Creates a set of Pipeline projects according to detected branches in one SCM repository.

=====================================
Jenkinsfile:2 Declartive
 --------->
pipeline {
  agent any
  stages {
    stage(build) {
      steps {
        sh "echo building apps"
        }
    }
    stage(test) {
      steps {
        sh "echo testing apps"
        }
    }
    stage(deploy) {
      steps {
        sh "echo deploying apps"
        }
    }    
  }  
}
																								
==========================
post {
  always {
    // 
 }
  failure {
 }
}
}

=======================
post :
 excute some logic after all the stages are executed 
conditions:
 - always
 - success
 - failure
 
 =====================================

Jenkinsfile: 3 Declartive											

pipeline {
  agent any
  stages {
    stage(build) {
      steps {
        sh "echo building an apps"
        }
    }
    stage(test) {
      steps {
        sh "echo testing apps"
        }
    }
    stage(deploy) {
      steps {
        sh "echo deploying apps"
        }
    }  
  }
  
  post {
  
    always {
 
       echo 'One way or another, I have finished'
       deleteDir() /* clean up our workspace */
       }
       success {
           echo 'I succeeded!'
       }
       unstable {
           echo 'I unstable!'
       }
       failure {
           echo 'I failed!'
       }
       changed {
           echo 'Things were different before.!'
       }
 }
 
}
=======================================
CODE_CHANGES == getGitchanges()  // its a grovy script it check any code changes on git
pipeline {
  agent any
  stages {
    stage(build) {
      when {
         expression {
            BRANCH_NAME == 'dev' && CODE_CHANGES == true     // it execute only when code change happens on git 
         }
       }
      steps {
      when {
         expression {
            BRANCH_NAME == 'dev' || BRANCH_NAME == 'master' 
        sh "echo installing apps"     
        }
    }
    stage(test) {
      steps {
        sh "echo testing apps"
        }
    }
    stage(deploy) {
      steps {
        sh "echo deploying apps"
        }
    }    
  }  
}
=============================================
//////
post {
  always {
     //
  }
  success {
    //
  }
  failure {
    //
  }
  
--------------------------------------ENVIRONMENT VARIABLE------------------------------------------
http://18.212.194.250:8080/env-vars.html/

The following variables are available to shell scripts

BRANCH_NAME:
For a multibranch project, this will be set to the name of the branch being built, for example in case you wish to deploy to production from master but not from feature branches; if corresponding to some kind of change request, the name is generally arbitrary (refer to CHANGE_ID and CHANGE_TARGET).
CHANGE_ID
For a multibranch project corresponding to some kind of change request, this will be set to the change ID, such as a pull request number, if supported; else unset.
CHANGE_URL
For a multibranch project corresponding to some kind of change request, this will be set to the change URL, if supported; else unset.


