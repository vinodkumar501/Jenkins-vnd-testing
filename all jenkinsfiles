
Pipeline syntax:

scripted pipeline and Declarative pipeline

Scripted:
----------

1.first syntax
2.groovy engine
3.advance scripting capability and high flexibility
4.difficult to start

syntax:
===================================
node {
  //groovy script
}
===================================


Declarative pipeline:
--------------------

1.easier to get started but not powerful
2.recent addition
3.predefined structure

This is the syntax you follow you have to fill in the /////////////
syntax:
===================================
pipeline {  
  agent any  
  stages {   
    stage(checkout) {      
     steps { 
          //////////////
        }
     }
  }
}


Here 
"pipeline" -> must be top level
"agent" -> where to execute
"stages" -> where to work happens
  
  eg:
  stages {   
    stage(build) {      
     steps { 
          //////////////
        }
     }
  }

------->
scripted 

node {
  //groovy script
}

--> scripted pipeline
node { 

-->equal to in declarative pipeline
pipeline {  
  agent any   
===================================
Jenkinsfile: 1 Declartive


pipeline {  
  agent any  
  stages {   
    stage(build) {      
     steps {       
       sh "echo builing apps"
        }
     }
  }
}
																								
======================================
pipeline 	must be top level
agent	Where to execute
stages	Where the work happens
  stage and steps
 
===========================
Multibranch Pipeline
Creates a set of Pipeline projects according to detected branches in one SCM repository.

=====================================
Jenkinsfile:2 Declartive
 --------->
pipeline {
  agent any
  stages {
    stage(build) {
      steps {
        sh "echo building apps"
        }
    }
    stage(test) {
      steps {
        sh "echo testing apps"
        }
    }
    stage(deploy) {
      steps {
        sh "echo deploying apps"
        }
    }    
  }  
}																								
==========================
post {
  always {
    // 
 }
  failure {
 }
}
}

=======================
post :
 excute some logic after all the stages are executed 
conditions:
 - always
 - success
 - failure
 
 =====================================

Jenkinsfile: 3 Declartive											

pipeline {
  agent any
  stages {
    stage(build) {
      steps {
        sh "echo building an apps"
        }
    }
    stage(test) {
      steps {
        sh "echo testing apps"
        }
    }
    stage(deploy) {
      steps {
        sh "echo deploying apps"
        }
    }  
  }
  
  post {
  
    always {
 
       echo 'One way or another, I have finished'
       deleteDir() /* clean up our workspace */
       }
       success {
           echo 'I succeeded!'
       }
       unstable {
           echo 'I unstable!'
       }
       failure {
           echo 'I failed!'
       }
       changed {
           echo 'Things were different before.!'
       }
 }
 
}
